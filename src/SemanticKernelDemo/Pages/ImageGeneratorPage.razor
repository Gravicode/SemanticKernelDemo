@page "/Image-Generator"
@using CommunityToolkit.Maui.Storage;
@using OpenAI.ObjectModels;
@inject ImageGeneratorService service
@inject IFileSaver fileSaver
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />

<h1>Image Generator Skill</h1>
<form>
    <div class="form-group">
        <label for="text1">Enter Image Desc</label>
        <textarea type="text" @bind="Desc" rows="5" class="form-control" id="text1" placeholder="Enter Desc Here" />
    </div>
    <div class="form-group">
        <label for="text2">Enter Number of Images</label>
        <input type="number" @bind="Number" class="form-control" id="text2" placeholder="Enter Number of Images" />
    </div>
    <div class="form-group">
        <label for="text3">Select Image Size</label>
        <select @bind="ImageSize" class="form-control" id="text3">

            <option value="@(StaticValues.ImageStatics.Size.Size256)">@(StaticValues.ImageStatics.Size.Size256)</option>
            <option value="@(StaticValues.ImageStatics.Size.Size512)">@(StaticValues.ImageStatics.Size.Size512)</option>
            <option value="@(StaticValues.ImageStatics.Size.Size1024)">@(StaticValues.ImageStatics.Size.Size1024)</option>
        </select>
    </div>
  
    <button type="button" @onclick="Process" disabled="@service.IsProcessing" class="btn btn-primary mt-2 mb-2">Process</button>
    <button type="button" @onclick="Clear" disabled="@service.IsProcessing" class="btn btn-info mt-2 mb-2">Clear</button>
</form>

@if (service.IsProcessing)
{
    <div class="spinner-border mt-2" role="status">
    </div>
}

@if (Result != null && Result.Count > 0)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th scope="col">No</th>
                <th scope="col">Name</th>
                <th scope="col">Image</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @{
                var count = 1;
            }
            @foreach (var item in Result)
            {
                <tr>
                    <th scope="row">@(count++)</th>
                    <td>@item.Title</td>
                    <td><img width="100" src="@item.Url" alt="image" /></td>
                    <td>
                        <Button Class="btn-outline-primary" @onclick="()=>Download(item)">Download</Button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}

@code {
    List<ToastMessage> messages = new List<ToastMessage>();
    public string Desc { get; set; } = "super women standing on the tesla rocket";
    public string ImageSize { get; set; } = StaticValues.ImageStatics.Size.Size256;
    public int Number { get; set; } = 5;
    public List<ImageModel> Result { get; set; } = new();
    HttpClient client = new();
    async Task Clear()
    {
        Desc = string.Empty;
        

    }
    protected override async Task OnInitializedAsync()
    {

    }
    public async void Download(ImageModel item)
    {
        var bytes = await client.GetByteArrayAsync(item.Url);
        var cts = new CancellationTokenSource();
        using var stream = new MemoryStream(bytes);
        var fileSaverResult = await fileSaver.SaveAsync("generated.png", stream, cts.Token);
        fileSaverResult.EnsureSuccess();

        cts = new CancellationTokenSource();
        //var toast = CommunityToolkit.Maui.Alerts.Toast.Make($"File is saved: {fileSaverResult.FilePath}", duration, fontSize);
        var toast = new ToastMessage
            {
                Type = ToastType.Success,
                Message = $"File is saved: {fileSaverResult.FilePath}",
            };
        messages.Add(toast);
    }
    private async Task Process()
    {
        Result = await service.GenerateImageAsync(Desc, Number,ImageSize);

    }
}
