@page "/qna"
@inject QnAService service
<Toasts class="p-3" Messages="messages" AutoHide="true" Delay="6000" Placement="ToastsPlacement.TopRight" />
<h1>QnA Skill</h1>
<form>
    <div class="form-group">
        <label for="text1">Enter Context or System Message</label>
        <textarea type="text" @bind="Context" rows="5" class="form-control" id="text1" placeholder="Enter Context Here" />
    </div>

    <button type="button" @onclick="Reset" disabled="@service.IsProcessing" class="btn btn-success mt-2">Reset</button>
</form>

<div class="row mt-2">
    <div class="col-lg-12">
        <div class="chatbody">
            <div class="panel panel-primary">
                <div class="panel-heading top-bar">
                    <div class="col-md-12 col-xs-12">
                        <h3 class="panel-title"><span class="glyphicon glyphicon-comment"></span> QnA Chat-Bot</h3>
                    </div>
                </div>
                <div class="panel-body msg_container_base">
                    @foreach (var item in Interactions)
                    {
                        <div class="row msg_container base_sent">
                            <div class="col-md-10 col-xs-10">
                                <div class="messages msg_sent">
                                    <p>
                                        @item.UserMessage
                                    </p>
                                    <time datetime="@item.CreatedDate.ToString("yyyy-MM-ddTHH:mm")">User • @item.CreatedDate.ToString("HH:mm")</time>
                                </div>
                            </div>
                        </div>

                        <div class="row msg_container base_receive">
                            <div class="col-md-10 col-xs-10">
                                <div class="messages msg_receive">
                                    <p>@item.AssistantMessage</p>
                                    <time datetime="@item.CreatedDate.ToString("yyyy-MM-ddTHH:mm")">Chat-Bot • @item.CreatedDate.ToString("HH:mm")</time>
                                </div>
                            </div>
                        </div>

                    }

                </div>
                <div class="panel-footer">
                    <div class="input-group mb-3">
                        <input type="text" class="form-control" @onkeydown="@Enter" @bind:event="oninput" @bind="Input" placeholder="Write your message here..." aria-label="user message" aria-describedby="basic-addon2">
                        <div class="input-group-append">
                            <span class="input-group-text" id="basic-addon2">
                                <button class="btn btn-primary mr-2 ml-2" @onclick="Process" disabled="@service.IsProcessing" id="btn-chat">Send</button>
                            </span>
                        </div>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

@if (service.IsProcessing)
{
    <div class="spinner-border mt-2" role="status">
    </div>
}
@code {
    string Context = "You are an intelligent cute girly assistant. you answer all questions with funny way. you always think positive and polite.";
    public string Input { get; set; }
    public string Result { get; set; }
    List<ToastMessage> messages = new List<ToastMessage>();
    List<ChatInteraction> Interactions = new List<ChatInteraction>();
    async Task Reset()
    {
        if (string.IsNullOrEmpty(Context))
        {
            var toast = new ToastMessage
                {
                    Type = ToastType.Warning,
                    Message = $"Please define context first.",
                };
            messages.Add(toast);
            return;
        }
        Interactions.Clear();
        service.SetupSkill(Context);
    }
    protected override async Task OnInitializedAsync()
    {
        service.SetupSkill(Context);
    }
    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Process();
        }
    }
    private async Task Process()
    {
        Result = await service.Chat(Input);
        Interactions.Add(new ChatInteraction() { CreatedDate = DateTime.Now, UserMessage = Input, AssistantMessage = Result });
        Input = string.Empty;
    }


}
